// declaration definissant le nom de la grammaire :

// identifiant : expression-réguliere { instructions-java  } ;

// identifiant toujours en majuscule

// pour regexp :
// 1) litteraux entre simple quote
// 2) un point pour un caractere quelconque
// 3) une intervalle de caractere avec ".." ou entre crochets comme par ex. pour un chiffre decimal : '0'..'9' ou [0-9]
// 4) operateurs :
// concatenation : rien
// alternative : |
// parenthesage : (et)
// multiplicateur 0 ou 1 fois : ?
// multiplicateur 1 ou n fois : +
// multiplicateur 0 ou n fois : *
// negation : ~

// Isolation de jetons dans un code source Java

// UNMATCH regle correspondant au reste

// Utilisation de ANTLR avec Idea ;
// On fait nos .g4
// Click droit config
// Output directory et localisation des grammar
// Click droit generate
// Creation d'un Main pour test notre fichier généré
// On met en argument le fichier dont on veut extraire les tokens en argument

// Analyse de l'output
// À chaque jeton correspond une chaîne de caractères entre crochets qui commence toujours par le numéro du canal @-1,.
// Suivent ensuite les indices du premier caractère du jeton et de son dernier caractère dans le flot d'entrée,
// puis le texte du jeton et le numéro du type du jeton entre crochets,
// et enfin le numéro de ligne et de colonne du premier caractère du jeton.

// Les numéros de types de jeton sont dans le fichier JetonsJava.token.

// commande a utiliser pour test son .g4
// java org.antlr.v4.Tool JetonsJava.g4 && javac JetonsJava.java MainJetonsJava.java && java MainJetonsJava < MainJetonsJava.java
// build, generate avec ANTLR, run
